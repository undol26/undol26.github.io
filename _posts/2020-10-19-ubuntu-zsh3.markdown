---
layout: post
title:  "[ubuntu] zshell - 3. Advantages (2)"
date:   2020-10-19
category: ubuntu
---

## Intro.
이번 포스팅 역시 <span style="color:#f92672">zshell</span>이 <span style="color:#f92672">bash shell</span>보다 어떤 점이 좋은지를 소개한다. 포스팅 길이가 생각보다 길어져서 두 편에 걸쳐서 글을 나열한다. 

이 포스팅을 한 줄로 요약하자면 <span style="color:#f92672">zshell</span>은 <span style="color:#f92672">bash shell</span>에 비해 command가 매우 편리하다.

내 관점에서 편리한 기능을 별 3개 만점으로 표시한다.

역시 이 포스팅에서도 git파일의 왼쪽은 <span style="color:#f92672">bash shell</span>, 오른쪽은 <span style="color:#f92672">zshell</span>이다.

## process id 바로 확인 가능 ★
간혹 프로그램이 <span style="color:#f92672">ctrl+c</span>로 종료가 되지 않아 강제로 종료를 시켜야 할 때가 있다.

보통 프로세스 아이디를 알아내어 강제 종료 시키는 경우가 일반적인데, 이를 <span style="color:#f92672">bash shell</span>를 쓸 때와 <span style="color:#f92672">zshell</span>를 쓸때의 차이를 보여주려 한다. 

![alt text](/public/img/ubuntu/zsh-3-1.gif)

<span style="color:#f92672">bash shell</span>에서는 커맨드 (<span style="color:#f92672">ps aux| grep testCpp</span>)를 통해 프로세스 아이디를 알아내야 한다.

하지만 <span style="color:#f92672">zshell</span>에서는 바로 아이디를 확인할 수 있다.

## command history 바로 볼 수 있음. ★★★
위의 예제에서 
```bash
source devel/setup.bash
(zsh에서는 setup.zsh)
```
를 다시 실행시키려고 한다.

![alt text](/public/img/ubuntu/zsh-3-2.gif)

<span style="color:#f92672">bash shell</span>에서는 해당 명령어가 나올 때 까지 <span style="color:#f92672">키보드 화살표 위(↑)</span>를 눌러야 한다. 만약 최근에 썼던 명령어가 너무나 멀리 떨어져 있다면? 나올 때 까지 올리거나 새로 타이핑을 하는게 빠른 경험이 있을 것이다.

하지만 <span style="color:#f92672">zshell</span>에서는 적당히 커맨드를 적고 <span style="color:#f92672">키보드 화살표 위(↑)</span>를 누르면, 내가 적은 걸로 시작하는 최근 명령어를 <span style="color:#f92672">키보드 화살표 위(↑)</span>를 누를때 마다 순서대로 보여준다. 

위의 예시에서 <span style="color:#f92672">sour</span>를 누르고 <span style="color:#f92672">키보드 화살표 위(↑)</span>를 눌렀기 때문에 <span style="color:#f92672">sour</span>로 시작하는 최근 명령어가 최근 순서부터 과거 순서까지 순차적으로 나오게 된다. 정말 말도 안되게 강력한 기능이다!

## git branch 바로 확인 가능 ★★
git에서 작업을 하고, push를 하려고 하는데 내가 지금 어떤 브랜치인지 확인이 필요할 때가 있다.

![alt text](/public/img/ubuntu/zsh-3-3.gif)

<span style="color:#f92672">bash shell</span>에서는 현재 branch가 어디인지 알려면 일반적인 git command를 적어야 한다. (<span style="color:#f92672">git branch -v</span>) 

하지만 <span style="color:#f92672">zshell</span>에서는 내가 어떤 브랜치에 있는지 바로 확인할 수 있다.

## git status 상태 바로 확인 가능 ★★★
git에서 내가 파일을 수정 했는지 안했는지 기억이 가물가물 할 때가 있다. 또는 수정한 것을 <span style="color:#f92672">ctrl+z</span>해서 원래대로 다 돌아왔다고 생각했는데 과연 제대로 됐는지 찝찝할 수도 있고. 물론 <span style="color:#f92672">vscode</span>를 사용한다면 어느정도 해결이 되는 부분이지만. 그래도 터미널 상에서 바로 확인할 수 있다!

![alt text](/public/img/ubuntu/zsh-3-4.gif)

<span style="color:#f92672">bash shell</span>에서는 나의 로컬 git 상태가 지금 변화했는지, (<span style="color:#f92672">add</span>) 할 게 있는지 등을 볼려면 git command를 적어야 한다. (<span style="color:#f92672">git status</span>)

하지만 <span style="color:#f92672">zshell</span>에서는 나의 상태창 맨 마지막에 표시(나의 skin에서는 노란색 x자 표시)를 보면서 현재 내 로컬에 변화 상태가 있는지 확인을 할 수 있다.

위의 예제에서와 같이 (<span style="color:#f92672">add</span>) 및 (<span style="color:#f92672">commit</span>)을 하면 (<span style="color:#f92672">git status</span>)상태가 깨끗해지므로, 표시가 사라지는 것을 확인할 수 있다.

## 단점
어떻게 장점만 있겠는가.. 하지만 써보면서 아직까지 찾은 단점은 단 하나였다.

![alt text](/public/img/ubuntu/zsh-3-5.gif)

<span style="color:#f92672">*(asterisk)</span>키를 간헐적으로 인식하지 못한다. 

해결책은 <span style="color:#f92672">/*(asterisk)</span>를 입력하면 된다.


## 결론
다시 정리하면, 
1. <span style="color:#f92672">zshell</span>은 command history를 빠르고 편리하게 이용 할 수 있다.
2. git에서도 편한 기능을 제공한다. (브랜치 확인, status 확인)
3. 프로그램을 강제 종료할 때 process id를 바로 확인할 수 있다.

## 관련글.
1. [[ubuntu] zshell - 1. Install](https://undol26.github.io/ubuntu/2020/10/03/ubuntu-zsh1.html)
2. [[ubuntu] zshell - 2. Advantages (1)](https://undol26.github.io/ubuntu/2020/10/18/ubuntu-zsh2.html)
3. [[ubuntu] zshell - 3. Advantages (2)](https://undol26.github.io/ubuntu/2020/10/19/ubuntu-zsh3.html)