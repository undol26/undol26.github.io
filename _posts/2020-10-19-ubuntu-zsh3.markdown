---
layout: post
title:  "[ubuntu] zshell - 3. Advantages (2)"
date:   2020-10-19
category: ubuntu
---

## Intro.
이번 포스팅에서는 `zshell`이 `bash shell`보다 어떤 점이 좋은지를 나열하려 한다. 두 편에 걸친 글 중 두 번째 글이다.

이 포스팅을 한 줄로 요약하면 <span style="color:#f92672">zshell은 bash shell 보다 `command`가 매우 편리하다.</span> 이다.

내 관점에서 편리한 기능을 별 3개 만점으로 표시한다.

예시 파일의 왼쪽은 `bash shell`, 오른쪽은 `zshell`이다.

현재 위치 및 하위 디렉터리 구성은 다음과 같다.

## process id 바로 확인 가능 ★
간혹 프로그램이 `ctrl+c`로 종료가 되지 않아 강제로 종료를 시켜야 할 때가 있다.

보통 프로세스 아이디를 알아내어 강제 종료 시키는 경우가 일반적인데, 이를 bash shell 를 쓸 때와 zshell 를 쓸때의 차이를 보여주려 한다. 

![alt text](/public/img/ubuntu/zsh-3-1.gif)

### bash shell 에서는??
커맨드 `ps aux| grep testCpp`를 통해 프로세스 아이디를 알아내야 한다.

### zshell 에서는??
바로 아이디를 확인할 수 있다.

## command history 바로 볼 수 있음. ★★★
위의 예제에서 
```bash
source devel/setup.bash
# (zsh에서는 setup.zsh)
```
를 다시 실행시키려고 한다.

![alt text](/public/img/ubuntu/zsh-3-2.gif)

### bash shell 에서는??
해당 명령어가 나올 때 까지 `키보드 화살표 위(↑)`를 눌러야 한다. 만약 최근에 썼던 명령어가 너무나 멀리 떨어져 있다면? 

그래도 나올 때 까지 계속 누르거나 그냥 새로 타이핑을 하는게 빠른 경험이 있을 것이다.

### zshell 에서는??
적당히 커맨드를 적고 `키보드 화살표 위(↑)`를 누르면, 내가 적은 걸로 시작하는 최근 명령어를 `키보드 화살표 위(↑)`를 누를때 마다 순서대로 보여준다. 

위의 예시에서 `sour`를 누르고 `키보드 화살표 위(↑)`를 눌렀기 때문에 `sour`로 시작하는 최근 명령어가 최근 순서부터 과거 순서까지 순차적으로 나오게 된다. 정말 말도 안되게 강력한 기능이다!

## git branch 바로 확인 가능 ★★
git에서 작업을 하고, push를 하려고 하는데 내가 지금 어떤 브랜치인지 확인이 필요할 때가 있다.

![alt text](/public/img/ubuntu/zsh-3-3.gif)

### bash shell 에서는??
현재 branch가 어디인지 알려면 일반적인 git command를 적어야 한다. (`git branch -v`) 

### zshell 에서는??
내가 어떤 브랜치에 있는지 바로 확인할 수 있다.

## git status 상태 바로 확인 가능 ★★★
git에서 내가 파일을 수정 했는지 안했는지 기억이 가물가물 할 때가 있다. 또는 수정한 것을 `ctrl+z`해서 원래대로 다 돌아왔다고 생각했는데 과연 제대로 됐는지 찝찝할 수도 있고. 물론 `vscode`를 사용한다면 어느정도 해결이 되는 부분이지만. 그래도 터미널 상에서 바로 확인할 수 있다!

![alt text](/public/img/ubuntu/zsh-3-4.gif)

### bash shell 에서는??
나의 로컬 git 상태가 지금 변화했는지, `add`할 게 있는지 등을 볼려면 `git status` 커맨드를 입력해야 한다.

### zshell 에서는??
나의 상태창 맨 마지막에 표시 (zshell 터미널 창의 노란색 x자 표시)를 보면서 현재 내 로컬에 변화 상태가 있는지 확인을 할 수 있다.

위의 예제에서와 같이 `add` 및 `commit`을 하면 `git status`상태가 깨끗해지므로, 표시가 사라지는 것을 확인할 수 있다.

## 단점
어떻게 장점만 있겠는가.. 하지만 써보면서 아직까지 찾은 단점은 단 하나였다.

![alt text](/public/img/ubuntu/zsh-3-5.gif)

`*`(asterisk)키를 간헐적으로 인식하지 못한다. 

해결책은 `/*`(asterisk)를 입력하면 된다.


## 결론
1편에서의 내용까지 합쳐서 다시 정리하면, 
1. directory간의 이동이 훨씬 편하다.
2. command history를 빠르고 편리하게 이용 할 수 있다.
3. git에서 편한 기능을 제공한다.
4. 프로그램을 강제 종료할 때 process id를 바로 확인할 수 있다.

## 관련글.
1. [[ubuntu] zshell - 1. Install](https://undol26.github.io/ubuntu/2020/10/03/ubuntu-zsh1.html)
2. [[ubuntu] zshell - 2. Advantages (1)](https://undol26.github.io/ubuntu/2020/10/18/ubuntu-zsh2.html)
3. [[ubuntu] zshell - 3. Advantages (2)](https://undol26.github.io/ubuntu/2020/10/19/ubuntu-zsh3.html)