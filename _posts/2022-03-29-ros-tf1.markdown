---
layout: post
title:  "[ROS] TF(transform) - 1. Prerequisite"
date:   2022-03-29
category: ROS
---

총 3개의 글로 transform에 대한 내용 및 코드에서 어떻게 적용할 수 있는지를 정리한다. 이 글은 그 중 첫번째인 Prerequisite이다.



로봇에서는 그림과 같이 사용자가 원하는 대로 축을 설정할 수 있다. 이러한 local축이 마음대로 정의되어 있을 때, 하나의 축으로 통일 시키는 과정이 필요하다. 이 과정을 transform이라고 한다.
![alt text](/public/img/ros/frames2.png){: width="30%" height="30%"}{: .center}

이건 70프로 크기
![alt text](/public/img/ros/frames2.png){: width="70%" height="70%"}



$ R_\theta =  \begin{bmatrix} cos (\theta) & -sin(\theta) 
\\ sin(\theta) & cos (\theta) \end{bmatrix} $

<p class="intro">다음과 같은 상황을 가정한다. 상위 구조에서 robot의 urdf를 tf로 생성한다. 서로 다른 축으로 정의된 여러 link를 한 축으로 어떻게 변경시키는가? 그리고 그 link의 값들은 어떻게 얻는가?</p>

친절하게도 [ros wiki](https://wiki.ros.org/) 에는 많은 것들이 설명되어 있다. 이 포스트에 대한 해답 역시 [여기](http://wiki.ros.org/tf/Tutorials/Writing%20a%20tf%20listener%20%28C%2B%2B%29) 에서 확인할 수 있다. 하지만 위키를 봐도 잘 감이 안오는 사람을 위해서. 그리고 훗날의 나를 위하여 다시 정리해보자.

현재 base축으로 사용하고 있는 urdf의 구조는 다음과 같다.

```xml
<?xml version="1.0" ?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from robot.urdf.xacro               | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->
<robot name="Test" xmlns:xacro="http://ros.org/wiki/xacro">

  <link name="base_link"/>
  <joint name="base_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <parent link="base_link"/>
    <child link="chassis_link"/>
  </joint>

  <link name="chassis_link">
  </link>

  <!--cyglidar-->
  <link name="laser_link"/>
  <joint name="laser_link_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0.5 0.3 0.5"/>
    <parent link="chassis_link"/>
    <child link="laser_link"/>
  </joint>

  <!--realsense-->
  <link name="camera_depth_optical_frame"/>
  <joint name="camera_depth_optical_frame_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0.5 -0.3 0.5"/>
    <parent link="chassis_link"/>
    <child link="camera_depth_optical_frame"/>
  </joint>

</robot>
```

cyglidar, realsense link를 chassis_link로 옮길 것이다.

# 1. transform 
```cpp
// listener를 사용하기 위해 해더를 포함해준다.
#include <tf/transform_listener.h>

// create object
std::string m_LidarTF_Name = "laser_link";
std::string m_CameraTF_Name = "camera_depth_optical_frame";
std::string m_BaseTF_Name = "chassis_link";

tf::TransformListener m_LidarListener, m_CameraListener;
tf::StampedTransform m_Lidar2BaseTF, m_Camera2BaseTF;

try {
    m_LidarListener.lookupTransform(m_LidarTF_Name, m_BaseTF_Name, ros::Time(0),
                                    m_Lidar2BaseTF);
    m_CameraListener.lookupTransform(m_CameraTF_Name, m_BaseTF_Name, ros::Time(0),
                                      m_Camera2BaseTF);
}
catch (tf::TransformException ex) {
    std::cout << "TF setting failed. " << std::endl;
    return 0;
}

double m_LidarTranslateX = m_Lidar2BaseTF.getOrigin().getX();
double m_LidarTranslateY = m_Lidar2BaseTF.getOrigin().getY();
double m_LidarTranslateZ = m_Lidar2BaseTF.getOrigin().getZ();

double m_CameraTranslateX = m_Camera2BaseTF.getOrigin().getX();
double m_CameraTranslateY = m_Camera2BaseTF.getOrigin().getY();
double m_CameraTranslateZ = m_Camera2BaseTF.getOrigin().getZ();
```

값을 확인하면 다음과 같다.

<img src="/public/img/ros/ros-tf1.png" alt=""/> 

`base` 축 기준으로 `lidar`는 (0.5,0.3,0.5), `realsense`는 (0.5, -0.3, 0.5)에 있었다.
`lidar`를 `base`로 옮기기 위해서는 `base`를 기준으로 (m_LidarTranslateX, m_LidarTranslateY, m_LidarTranslateZ) = (-0.5, -0.3, -0.5) 만큼 `이동(translate)`해야 한다. 카메라도 마찬가지.